name: Frontend CD Pipeline

on:
    push:
        branches: [main]
    pull_request:
        branches: [ main ]
    workflow_dispatch:

env:
    NODE_VERSION: '22.11.0'
    AWS_REGION: 'ap-northeast-2'

jobs:
    build-and-deploy:
        name: Build and Deploy to S3/CloudFront
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: 'npm'

            - name: Cache Next.js build
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.npm
                      .next/cache
                  key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
                  restore-keys: |
                      ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

            - name: Install dependencies
              run: npm ci

            - name: Create production env file
              run: |
                  echo "NEXT_PUBLIC_BACKEND_URL=https://api.fanfal.com" >> .env.production
                  echo "NEXT_PUBLIC_FRONTEND_URL=${{ secrets.NEXT_PUBLIC_FRONTEND_URL }}" >> .env.production
                  echo "NEXT_PUBLIC_KOPIS_SERVICE_KEY=${{ secrets.NEXT_PUBLIC_KOPIS_SERVICE_KEY }}" >> .env.production
                  echo "NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=${{ secrets.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY }}" >> .env.production

            - name: Build application
              run: |
                  npm run build

                  # Static export 시도 (next.config.js에 output: 'export' 설정 필요)
                  if grep -q "output.*export" next.config.js || grep -q "output.*export" next.config.mjs; then
                    echo "Static export configured, skipping next export"
                  else
                    echo "Attempting static export..."
                    npx next export || echo "Static export not supported, using .next directory"
                  fi

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: Deploy to S3
              run: |
                  # 빌드 디렉토리 확인
                  if [ -d "out" ]; then
                    BUILD_DIR="out"
                    echo "📁 Using static export directory: out/"
                  else
                    BUILD_DIR=".next"
                    echo "📁 Using Next.js build directory: .next/"
                    echo "⚠️  Warning: Deploying SSR build to S3. Consider using 'output: export' in next.config.js"
                  fi

                  # S3 버킷 이름 설정
                  S3_BUCKET="${{ secrets.S3_BUCKET_NAME }}"

                  # 정적 자산 업로드 (긴 캐시)
                  echo "📤 Uploading static assets..."
                  aws s3 sync $BUILD_DIR s3://$S3_BUCKET \
                    --exclude "*.html" \
                    --exclude "*.json" \
                    --exclude "sw.js" \
                    --exclude "workbox-*" \
                    --cache-control "public, max-age=31536000, immutable" \
                    --delete

                  # HTML 파일 업로드 (캐시 없음)
                  echo "📤 Uploading HTML files..."
                  aws s3 sync $BUILD_DIR s3://$S3_BUCKET \
                    --exclude "*" \
                    --include "*.html" \
                    --cache-control "no-cache, no-store, must-revalidate" \
                    --content-type "text/html; charset=utf-8" \
                    --delete

                  # JSON 파일 업로드 (짧은 캐시)
                  echo "📤 Uploading JSON files..."
                  aws s3 sync $BUILD_DIR s3://$S3_BUCKET \
                    --exclude "*" \
                    --include "*.json" \
                    --cache-control "public, max-age=0, s-maxage=300" \
                    --delete

                  # Service Worker 파일 업로드 (캐시 없음)
                  echo "📤 Uploading Service Worker files..."
                  aws s3 sync $BUILD_DIR s3://$S3_BUCKET \
                    --exclude "*" \
                    --include "sw.js" \
                    --include "workbox-*" \
                    --cache-control "no-cache, no-store, must-revalidate" \
                    --delete

            - name: Invalidate CloudFront cache
              run: |
                  echo "🔄 Invalidating CloudFront cache..."
                  INVALIDATION_ID=$(aws cloudfront create-invalidation \
                    --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
                    --paths "/*" \
                    --query 'Invalidation.Id' \
                    --output text)

                  echo "Invalidation ID: $INVALIDATION_ID"

                  echo "Waiting for invalidation to complete..."
                  aws cloudfront wait invalidation-completed \
                    --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
                    --id $INVALIDATION_ID \
                    || echo "Invalidation is processing..."

#  health-check:
#    name: Deployment Health Check
#    runs-on: ubuntu-latest
#    needs: build-and-deploy
#
#    steps:
#      - name: Wait for deployment
#        run: sleep 30
#
#      - name: Check website availability
#        run: |
#          echo "🔍 Checking website availability..."
#
#          SITE_URL="${{ secrets.NEXT_PUBLIC_FRONTEND_URL }}"
#          MAX_RETRIES=5
#          RETRY_INTERVAL=10
#
#          for i in $(seq 1 $MAX_RETRIES); do
#            echo "Attempt $i/$MAX_RETRIES..."
#
#            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$SITE_URL")
#
#            if [ "$HTTP_STATUS" = "200" ]; then
#              echo "✅ Website is accessible! (HTTP $HTTP_STATUS)"
#              exit 0
#            else
#              echo "❌ Website returned HTTP $HTTP_STATUS"
#
#              if [ $i -lt $MAX_RETRIES ]; then
#                echo "Retrying in $RETRY_INTERVAL seconds..."
#                sleep $RETRY_INTERVAL
#              fi
#            fi
#          done
#
#          echo "❌ Website health check failed after $MAX_RETRIES attempts"
#          exit 1
